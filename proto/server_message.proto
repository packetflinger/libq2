// compile with:
// protoc --go_out=. --go_opt=paths=source_relative server_message.proto
syntax="proto3";
option go_package = "github.com/packetflinger/libq2/proto";
package proto;

message DM2Demo {
    ServerInfo serverinfo = 1;
    map<int32, PackedEntity> baselines = 2;
    map<int32, ConfigString> configstrings = 3;
    map<int32, Frame> frames = 5;
    int32 current_frame = 6;    // index to the frames map
}

message ServerInfo {
    uint32 protocol = 1;        // 32 bits
    uint32 server_count = 2;    // 32 bits
    bool demo = 3;              // 8 bits
    string game_dir = 4;
    uint32 client_number = 5;   // 16 bits
    string map_name = 6;
}

message ConfigString {
    uint32 index = 1;           // 16 bits
    string data = 2;
}

message StuffText {
    string data = 1;
}

// an edict_t packed up and ready for xfer
message PackedEntity {
    uint32 number = 1;          // 32 bits
    int32 origin_x = 2;         // 16 bits
    int32 origin_y = 3;         // 16 bits
    int32 origin_z = 4;         // 16 bits
    int32 angle_x = 5;
    int32 angle_y = 6;
    int32 angle_z = 7;
    int32 old_origin_x = 8;
    int32 old_origin_y = 9;
    int32 old_origin_z = 10;
    uint32 model_index = 11;    // 8 bits
    uint32 model_index2 = 12;
    uint32 model_index3 = 13;
    uint32 model_index4 = 14;
    uint32 skin = 15;
    uint32 effects = 16;
    uint32 render_fx = 17;
    uint32 solid = 18;
    uint32 frame = 19;          // 16 bits
    uint32 sound = 20;          // 8 bits
    uint32 event = 21;          // 8 bits
    bool remove = 22;           // this ent should be removed after frame
}

message PlayerMove {
    uint32 type = 1;            // 8 bits
    int32 origin_x = 2;         // 16 bits
    int32 origin_y = 3;
    int32 origin_z = 4;
    uint32 velocity_x = 5;
    uint32 velocity_y = 6;
    uint32 velocity_z = 7;
    uint32 flags = 8;           // byte
    uint32 time = 9;            // byte
    int32 gravity = 10;         // 16 bits
    int32 delta_angle_x = 11;   // 16 bits
    int32 delta_angle_y = 12;
    int32 delta_angle_z = 13;
}

message PackedPlayer {
    PlayerMove movestate = 1;
    int32 view_angles_x = 2;        // 16 bits
    int32 view_angles_y = 3;        // 16 bits
    int32 view_angles_z = 4;        // 16 bits
    int32 view_offset_x = 5;        // 8 bits
    int32 view_offset_y = 6;
    int32 view_offset_z = 7;
    int32 kick_angles_x = 8;
    int32 kick_angles_y = 9;
    int32 kick_angles_z = 10;
    int32 gun_angles_x = 11;
    int32 gun_angles_y = 12;
    int32 gun_angles_z = 13;
    int32 gun_offset_x = 14;
    int32 gun_offset_y = 15;
    int32 gun_offset_z = 16;
    uint32 gun_index = 17;          // 8 bits
    uint32 gun_frame = 18;          // 8 bits
    int32 blend_w = 19;
    int32 blend_x = 20;
    int32 blend_y = 21;
    int32 blend_z = 22;
    uint32 fov = 23;
    uint32 rd_flags = 24;
    map<uint32, int32> stats = 26;  // 16 bits each
}

message Frame {
    int32 number = 1;               // signed
    int32 delta = 2;                // signed
    uint32 suppressed = 3;          // 8 bits
    uint32 area_bytes = 4;          // 8 bits
    repeated uint32 area_bits = 5;  // byte
    PackedPlayer player_state = 6;
    map<int32, PackedEntity> entities = 7;
    map<int32, ConfigString> configstrings = 8;
    repeated CenterPrint centerprints = 9;
    repeated StuffText stufftexts= 10;
    repeated Print prints = 11;
    repeated PackedSound sounds = 12;
    repeated TemporaryEntity temporary_entities = 13;
    repeated MuzzleFlash flashes1 = 14;
    repeated MuzzleFlash flashes2 = 15;
    repeated Layout layouts = 16;
}

message Print {
    uint32 level = 1;       // 8 bits
    string data = 2;
}

// Start a sound playing
message PackedSound {
    uint32 flags = 1;       // 8 bits
    uint32 index = 2;       // 8 bits, CS_SOUNDS + this
    uint32 volume = 3;
    uint32 attenuation = 4;
    uint32 time_offset = 5;
    uint32 channel = 6;     // 16 bits
    uint32 entity = 7;      // 16 bits, relative to this ent
    uint32 position_x = 8;  // 16 bits
    uint32 position_y = 9;
    uint32 position_z = 10;
}

message TemporaryEntity {
    uint32 type = 1;        // 8 bits
    uint32 position1_x = 2; // 16 bits
    uint32 position1_y = 3; // 16 bits
    uint32 position1_z = 4; // 16 bits
    uint32 position2_x = 5; // 16 bits
    uint32 position2_y = 6; // 16 bits
    uint32 position2_z = 7; // 16 bits
    uint32 offset_x = 8;    // 16 bits
    uint32 offset_y = 9;    // 16 bits
    uint32 offset_z = 10;   // 16 bits
    uint32 direction = 11;  // 8 bits
    uint32 count = 12;      // 8 bits
    uint32 color = 13;      // 8 bits
    int32 entity1 = 14;    // 16 bits
    int32 entity2 = 15;    // 16 bits
    int32 time = 16;       // 32 bits
}

message MuzzleFlash {
    uint32 entity = 1;      // 16 bits
    uint32 weapon = 2;      // 8 bits
}

message Layout {
    string data = 1;
}

message CenterPrint {
    string data = 1;
}
