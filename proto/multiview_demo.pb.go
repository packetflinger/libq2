// compile with:
// protoc --go_out=. --go_opt=paths=source_relative multiview_demo.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: multiview_demo.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All the messages that make up a complete multi-view demo. A .mvd2 file can
// contain more than one MvdDemo. Each map is technically considered a separate
// demo even though they're all contained in the same file.
type MvdDemo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version          int32                    `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`                         // minor version, 2010 is current
	Identity         int32                    `protobuf:"varint,2,opt,name=identity,proto3" json:"identity,omitempty"`                       // unique number
	GameDir          string                   `protobuf:"bytes,3,opt,name=game_dir,json=gameDir,proto3" json:"game_dir,omitempty"`           // "opentdm", "baseq2", etc
	Dummy            int32                    `protobuf:"varint,4,opt,name=dummy,proto3" json:"dummy,omitempty"`                             // player number of observer dummy
	MaxPlayers       int32                    `protobuf:"varint,5,opt,name=max_players,json=maxPlayers,proto3" json:"max_players,omitempty"` // server cvar
	Flags            int32                    `protobuf:"varint,6,opt,name=flags,proto3" json:"flags,omitempty"`
	EntityStateFlags int32                    `protobuf:"varint,7,opt,name=entity_state_flags,json=entityStateFlags,proto3" json:"entity_state_flags,omitempty"`
	PlayerStateFlags int32                    `protobuf:"varint,8,opt,name=player_state_flags,json=playerStateFlags,proto3" json:"player_state_flags,omitempty"`
	Remap            *MvdConfigStringRemap    `protobuf:"bytes,9,opt,name=remap,proto3" json:"remap,omitempty"` // cs numbers, flags depenedant
	Extension        *MvdEntityStateExtension `protobuf:"bytes,10,opt,name=extension,proto3" json:"extension,omitempty"`
	Configstrings    map[int32]*ConfigString  `protobuf:"bytes,11,rep,name=configstrings,proto3" json:"configstrings,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Players          map[int32]*MvdPlayer     `protobuf:"bytes,12,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Entities         map[int32]*PackedEntity  `protobuf:"bytes,13,rep,name=entities,proto3" json:"entities,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Packets          []*MvdPacket             `protobuf:"bytes,14,rep,name=packets,proto3" json:"packets,omitempty"`
}

func (x *MvdDemo) Reset() {
	*x = MvdDemo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiview_demo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvdDemo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvdDemo) ProtoMessage() {}

func (x *MvdDemo) ProtoReflect() protoreflect.Message {
	mi := &file_multiview_demo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvdDemo.ProtoReflect.Descriptor instead.
func (*MvdDemo) Descriptor() ([]byte, []int) {
	return file_multiview_demo_proto_rawDescGZIP(), []int{0}
}

func (x *MvdDemo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MvdDemo) GetIdentity() int32 {
	if x != nil {
		return x.Identity
	}
	return 0
}

func (x *MvdDemo) GetGameDir() string {
	if x != nil {
		return x.GameDir
	}
	return ""
}

func (x *MvdDemo) GetDummy() int32 {
	if x != nil {
		return x.Dummy
	}
	return 0
}

func (x *MvdDemo) GetMaxPlayers() int32 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *MvdDemo) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *MvdDemo) GetEntityStateFlags() int32 {
	if x != nil {
		return x.EntityStateFlags
	}
	return 0
}

func (x *MvdDemo) GetPlayerStateFlags() int32 {
	if x != nil {
		return x.PlayerStateFlags
	}
	return 0
}

func (x *MvdDemo) GetRemap() *MvdConfigStringRemap {
	if x != nil {
		return x.Remap
	}
	return nil
}

func (x *MvdDemo) GetExtension() *MvdEntityStateExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MvdDemo) GetConfigstrings() map[int32]*ConfigString {
	if x != nil {
		return x.Configstrings
	}
	return nil
}

func (x *MvdDemo) GetPlayers() map[int32]*MvdPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *MvdDemo) GetEntities() map[int32]*PackedEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *MvdDemo) GetPackets() []*MvdPacket {
	if x != nil {
		return x.Packets
	}
	return nil
}

type Multicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Reliable bool   `protobuf:"varint,2,opt,name=reliable,proto3" json:"reliable,omitempty"`
	Leafnum  int32  `protobuf:"varint,3,opt,name=leafnum,proto3" json:"leafnum,omitempty"`
	Data     string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Multicast) Reset() {
	*x = Multicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiview_demo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Multicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multicast) ProtoMessage() {}

func (x *Multicast) ProtoReflect() protoreflect.Message {
	mi := &file_multiview_demo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multicast.ProtoReflect.Descriptor instead.
func (*Multicast) Descriptor() ([]byte, []int) {
	return file_multiview_demo_proto_rawDescGZIP(), []int{1}
}

func (x *Multicast) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Multicast) GetReliable() bool {
	if x != nil {
		return x.Reliable
	}
	return false
}

func (x *Multicast) GetLeafnum() int32 {
	if x != nil {
		return x.Leafnum
	}
	return 0
}

func (x *Multicast) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// Different max limits and cs offsets depending on protocol version.
type MvdConfigStringRemap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extended    bool  `protobuf:"varint,1,opt,name=extended,proto3" json:"extended,omitempty"`
	MaxEdicts   int32 `protobuf:"varint,2,opt,name=max_edicts,json=maxEdicts,proto3" json:"max_edicts,omitempty"`
	MaxModels   int32 `protobuf:"varint,3,opt,name=max_models,json=maxModels,proto3" json:"max_models,omitempty"`
	MaxSounds   int32 `protobuf:"varint,4,opt,name=max_sounds,json=maxSounds,proto3" json:"max_sounds,omitempty"`
	MaxImages   int32 `protobuf:"varint,5,opt,name=max_images,json=maxImages,proto3" json:"max_images,omitempty"`
	AirAccel    int32 `protobuf:"varint,6,opt,name=air_accel,json=airAccel,proto3" json:"air_accel,omitempty"`
	MaxClients  int32 `protobuf:"varint,7,opt,name=max_clients,json=maxClients,proto3" json:"max_clients,omitempty"`
	MapChecksum int32 `protobuf:"varint,8,opt,name=map_checksum,json=mapChecksum,proto3" json:"map_checksum,omitempty"`
	Models      int32 `protobuf:"varint,9,opt,name=models,proto3" json:"models,omitempty"`
	Sounds      int32 `protobuf:"varint,10,opt,name=sounds,proto3" json:"sounds,omitempty"`
	Images      int32 `protobuf:"varint,11,opt,name=images,proto3" json:"images,omitempty"`
	Lights      int32 `protobuf:"varint,12,opt,name=lights,proto3" json:"lights,omitempty"`
	Items       int32 `protobuf:"varint,13,opt,name=items,proto3" json:"items,omitempty"`
	PlayerSkins int32 `protobuf:"varint,14,opt,name=player_skins,json=playerSkins,proto3" json:"player_skins,omitempty"`
	General     int32 `protobuf:"varint,15,opt,name=general,proto3" json:"general,omitempty"`
	End         int32 `protobuf:"varint,16,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *MvdConfigStringRemap) Reset() {
	*x = MvdConfigStringRemap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiview_demo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvdConfigStringRemap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvdConfigStringRemap) ProtoMessage() {}

func (x *MvdConfigStringRemap) ProtoReflect() protoreflect.Message {
	mi := &file_multiview_demo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvdConfigStringRemap.ProtoReflect.Descriptor instead.
func (*MvdConfigStringRemap) Descriptor() ([]byte, []int) {
	return file_multiview_demo_proto_rawDescGZIP(), []int{2}
}

func (x *MvdConfigStringRemap) GetExtended() bool {
	if x != nil {
		return x.Extended
	}
	return false
}

func (x *MvdConfigStringRemap) GetMaxEdicts() int32 {
	if x != nil {
		return x.MaxEdicts
	}
	return 0
}

func (x *MvdConfigStringRemap) GetMaxModels() int32 {
	if x != nil {
		return x.MaxModels
	}
	return 0
}

func (x *MvdConfigStringRemap) GetMaxSounds() int32 {
	if x != nil {
		return x.MaxSounds
	}
	return 0
}

func (x *MvdConfigStringRemap) GetMaxImages() int32 {
	if x != nil {
		return x.MaxImages
	}
	return 0
}

func (x *MvdConfigStringRemap) GetAirAccel() int32 {
	if x != nil {
		return x.AirAccel
	}
	return 0
}

func (x *MvdConfigStringRemap) GetMaxClients() int32 {
	if x != nil {
		return x.MaxClients
	}
	return 0
}

func (x *MvdConfigStringRemap) GetMapChecksum() int32 {
	if x != nil {
		return x.MapChecksum
	}
	return 0
}

func (x *MvdConfigStringRemap) GetModels() int32 {
	if x != nil {
		return x.Models
	}
	return 0
}

func (x *MvdConfigStringRemap) GetSounds() int32 {
	if x != nil {
		return x.Sounds
	}
	return 0
}

func (x *MvdConfigStringRemap) GetImages() int32 {
	if x != nil {
		return x.Images
	}
	return 0
}

func (x *MvdConfigStringRemap) GetLights() int32 {
	if x != nil {
		return x.Lights
	}
	return 0
}

func (x *MvdConfigStringRemap) GetItems() int32 {
	if x != nil {
		return x.Items
	}
	return 0
}

func (x *MvdConfigStringRemap) GetPlayerSkins() int32 {
	if x != nil {
		return x.PlayerSkins
	}
	return 0
}

func (x *MvdConfigStringRemap) GetGeneral() int32 {
	if x != nil {
		return x.General
	}
	return 0
}

func (x *MvdConfigStringRemap) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type MvdPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InUse       bool          `protobuf:"varint,1,opt,name=in_use,json=inUse,proto3" json:"in_use,omitempty"`
	Name        string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PlayerState *PackedPlayer `protobuf:"bytes,3,opt,name=player_state,json=playerState,proto3" json:"player_state,omitempty"`
}

func (x *MvdPlayer) Reset() {
	*x = MvdPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiview_demo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvdPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvdPlayer) ProtoMessage() {}

func (x *MvdPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_multiview_demo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvdPlayer.ProtoReflect.Descriptor instead.
func (*MvdPlayer) Descriptor() ([]byte, []int) {
	return file_multiview_demo_proto_rawDescGZIP(), []int{3}
}

func (x *MvdPlayer) GetInUse() bool {
	if x != nil {
		return x.InUse
	}
	return false
}

func (x *MvdPlayer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MvdPlayer) GetPlayerState() *PackedPlayer {
	if x != nil {
		return x.PlayerState
	}
	return nil
}

type MvdEntityStateExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoreFx          int32 `protobuf:"varint,1,opt,name=more_fx,json=moreFx,proto3" json:"more_fx,omitempty"`
	Alpha           int32 `protobuf:"varint,2,opt,name=alpha,proto3" json:"alpha,omitempty"`
	Scale           int32 `protobuf:"varint,3,opt,name=scale,proto3" json:"scale,omitempty"`
	LoopVolume      int32 `protobuf:"varint,4,opt,name=loop_volume,json=loopVolume,proto3" json:"loop_volume,omitempty"`
	LoopAttenuation int32 `protobuf:"varint,5,opt,name=loop_attenuation,json=loopAttenuation,proto3" json:"loop_attenuation,omitempty"`
}

func (x *MvdEntityStateExtension) Reset() {
	*x = MvdEntityStateExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiview_demo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvdEntityStateExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvdEntityStateExtension) ProtoMessage() {}

func (x *MvdEntityStateExtension) ProtoReflect() protoreflect.Message {
	mi := &file_multiview_demo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvdEntityStateExtension.ProtoReflect.Descriptor instead.
func (*MvdEntityStateExtension) Descriptor() ([]byte, []int) {
	return file_multiview_demo_proto_rawDescGZIP(), []int{4}
}

func (x *MvdEntityStateExtension) GetMoreFx() int32 {
	if x != nil {
		return x.MoreFx
	}
	return 0
}

func (x *MvdEntityStateExtension) GetAlpha() int32 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *MvdEntityStateExtension) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *MvdEntityStateExtension) GetLoopVolume() int32 {
	if x != nil {
		return x.LoopVolume
	}
	return 0
}

func (x *MvdEntityStateExtension) GetLoopAttenuation() int32 {
	if x != nil {
		return x.LoopAttenuation
	}
	return 0
}

type MvdFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//int32 portal_bits = 1;  // remove later this is len(portal_data)
	PortalData []byte                  `protobuf:"bytes,2,opt,name=portal_data,json=portalData,proto3" json:"portal_data,omitempty"`
	Players    map[int32]*PackedPlayer `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   // players introduced this frame
	Entities   map[int32]*PackedEntity `protobuf:"bytes,4,rep,name=entities,proto3" json:"entities,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // ents seen this frame
	Sounds     []*PackedSound          `protobuf:"bytes,5,rep,name=sounds,proto3" json:"sounds,omitempty"`
}

func (x *MvdFrame) Reset() {
	*x = MvdFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiview_demo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvdFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvdFrame) ProtoMessage() {}

func (x *MvdFrame) ProtoReflect() protoreflect.Message {
	mi := &file_multiview_demo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvdFrame.ProtoReflect.Descriptor instead.
func (*MvdFrame) Descriptor() ([]byte, []int) {
	return file_multiview_demo_proto_rawDescGZIP(), []int{5}
}

func (x *MvdFrame) GetPortalData() []byte {
	if x != nil {
		return x.PortalData
	}
	return nil
}

func (x *MvdFrame) GetPlayers() map[int32]*PackedPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *MvdFrame) GetEntities() map[int32]*PackedEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *MvdFrame) GetSounds() []*PackedSound {
	if x != nil {
		return x.Sounds
	}
	return nil
}

type MvdMulticast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // byte
	Leaf int32  `protobuf:"varint,2,opt,name=leaf,proto3" json:"leaf,omitempty"` // word
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MvdMulticast) Reset() {
	*x = MvdMulticast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiview_demo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvdMulticast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvdMulticast) ProtoMessage() {}

func (x *MvdMulticast) ProtoReflect() protoreflect.Message {
	mi := &file_multiview_demo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvdMulticast.ProtoReflect.Descriptor instead.
func (*MvdMulticast) Descriptor() ([]byte, []int) {
	return file_multiview_demo_proto_rawDescGZIP(), []int{6}
}

func (x *MvdMulticast) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MvdMulticast) GetLeaf() int32 {
	if x != nil {
		return x.Leaf
	}
	return 0
}

func (x *MvdMulticast) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type MvdUnicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientNumber  int32           `protobuf:"varint,1,opt,name=client_number,json=clientNumber,proto3" json:"client_number,omitempty"` // player index
	Player        *MvdPlayer      `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
	Layouts       []*Layout       `protobuf:"bytes,3,rep,name=layouts,proto3" json:"layouts,omitempty"`
	Configstrings []*ConfigString `protobuf:"bytes,4,rep,name=configstrings,proto3" json:"configstrings,omitempty"`
	Prints        []*Print        `protobuf:"bytes,5,rep,name=prints,proto3" json:"prints,omitempty"`
	Stuffs        []*StuffText    `protobuf:"bytes,6,rep,name=stuffs,proto3" json:"stuffs,omitempty"`
}

func (x *MvdUnicast) Reset() {
	*x = MvdUnicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiview_demo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvdUnicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvdUnicast) ProtoMessage() {}

func (x *MvdUnicast) ProtoReflect() protoreflect.Message {
	mi := &file_multiview_demo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvdUnicast.ProtoReflect.Descriptor instead.
func (*MvdUnicast) Descriptor() ([]byte, []int) {
	return file_multiview_demo_proto_rawDescGZIP(), []int{7}
}

func (x *MvdUnicast) GetClientNumber() int32 {
	if x != nil {
		return x.ClientNumber
	}
	return 0
}

func (x *MvdUnicast) GetPlayer() *MvdPlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *MvdUnicast) GetLayouts() []*Layout {
	if x != nil {
		return x.Layouts
	}
	return nil
}

func (x *MvdUnicast) GetConfigstrings() []*ConfigString {
	if x != nil {
		return x.Configstrings
	}
	return nil
}

func (x *MvdUnicast) GetPrints() []*Print {
	if x != nil {
		return x.Prints
	}
	return nil
}

func (x *MvdUnicast) GetStuffs() []*StuffText {
	if x != nil {
		return x.Stuffs
	}
	return nil
}

type MvdPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sounds        []*PackedSound  `protobuf:"bytes,1,rep,name=sounds,proto3" json:"sounds,omitempty"`
	Prints        []*Print        `protobuf:"bytes,2,rep,name=prints,proto3" json:"prints,omitempty"`
	Unicasts      []*MvdUnicast   `protobuf:"bytes,3,rep,name=unicasts,proto3" json:"unicasts,omitempty"`
	Multicasts    []*MvdMulticast `protobuf:"bytes,4,rep,name=multicasts,proto3" json:"multicasts,omitempty"`
	Frames        []*MvdFrame     `protobuf:"bytes,5,rep,name=frames,proto3" json:"frames,omitempty"`
	Configstrings []*ConfigString `protobuf:"bytes,6,rep,name=configstrings,proto3" json:"configstrings,omitempty"` // maybe a map?
}

func (x *MvdPacket) Reset() {
	*x = MvdPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiview_demo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvdPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvdPacket) ProtoMessage() {}

func (x *MvdPacket) ProtoReflect() protoreflect.Message {
	mi := &file_multiview_demo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvdPacket.ProtoReflect.Descriptor instead.
func (*MvdPacket) Descriptor() ([]byte, []int) {
	return file_multiview_demo_proto_rawDescGZIP(), []int{8}
}

func (x *MvdPacket) GetSounds() []*PackedSound {
	if x != nil {
		return x.Sounds
	}
	return nil
}

func (x *MvdPacket) GetPrints() []*Print {
	if x != nil {
		return x.Prints
	}
	return nil
}

func (x *MvdPacket) GetUnicasts() []*MvdUnicast {
	if x != nil {
		return x.Unicasts
	}
	return nil
}

func (x *MvdPacket) GetMulticasts() []*MvdMulticast {
	if x != nil {
		return x.Multicasts
	}
	return nil
}

func (x *MvdPacket) GetFrames() []*MvdFrame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *MvdPacket) GetConfigstrings() []*ConfigString {
	if x != nil {
		return x.Configstrings
	}
	return nil
}

var File_multiview_demo_proto protoreflect.FileDescriptor

var file_multiview_demo_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x6d, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x06, 0x0a, 0x07, 0x4d, 0x76, 0x64, 0x44, 0x65, 0x6d, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x65, 0x6d,
	0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x76, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x6d, 0x61, 0x70, 0x52, 0x05, 0x72, 0x65, 0x6d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x76, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x76, 0x64, 0x44, 0x65, 0x6d,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x76, 0x64,
	0x44, 0x65, 0x6d, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x76, 0x64, 0x44, 0x65, 0x6d, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x76,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x1a, 0x55, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x76, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x66, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x66, 0x6e, 0x75, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xd4, 0x03, 0x0a, 0x14, 0x4d, 0x76, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x61, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x45, 0x64, 0x69, 0x63, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x69, 0x72, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x6e, 0x0a, 0x09, 0x4d, 0x76, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x4d, 0x76,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x72, 0x65, 0x46, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x6f, 0x70, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6c, 0x6f, 0x6f, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c,
	0x6f, 0x6f, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x6f, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xed, 0x02, 0x0a, 0x08, 0x4d, 0x76, 0x64, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x76,
	0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x76, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x1a, 0x4f, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x0c, 0x4d, 0x76, 0x64, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65,
	0x61, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8f, 0x02, 0x0a, 0x0a, 0x4d, 0x76, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x76, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x52, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x52, 0x06, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x75, 0x66, 0x66, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x75, 0x66, 0x66, 0x54, 0x65, 0x78, 0x74, 0x52, 0x06, 0x73, 0x74,
	0x75, 0x66, 0x66, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x09, 0x4d, 0x76, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x24,
	0x0a, 0x06, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x76, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x76, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x0a, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x76, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x26, 0x5a, 0x24,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x66, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2f, 0x6c, 0x69, 0x62, 0x71, 0x32, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_multiview_demo_proto_rawDescOnce sync.Once
	file_multiview_demo_proto_rawDescData = file_multiview_demo_proto_rawDesc
)

func file_multiview_demo_proto_rawDescGZIP() []byte {
	file_multiview_demo_proto_rawDescOnce.Do(func() {
		file_multiview_demo_proto_rawDescData = protoimpl.X.CompressGZIP(file_multiview_demo_proto_rawDescData)
	})
	return file_multiview_demo_proto_rawDescData
}

var file_multiview_demo_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_multiview_demo_proto_goTypes = []interface{}{
	(*MvdDemo)(nil),                 // 0: proto.MvdDemo
	(*Multicast)(nil),               // 1: proto.Multicast
	(*MvdConfigStringRemap)(nil),    // 2: proto.MvdConfigStringRemap
	(*MvdPlayer)(nil),               // 3: proto.MvdPlayer
	(*MvdEntityStateExtension)(nil), // 4: proto.MvdEntityStateExtension
	(*MvdFrame)(nil),                // 5: proto.MvdFrame
	(*MvdMulticast)(nil),            // 6: proto.MvdMulticast
	(*MvdUnicast)(nil),              // 7: proto.MvdUnicast
	(*MvdPacket)(nil),               // 8: proto.MvdPacket
	nil,                             // 9: proto.MvdDemo.ConfigstringsEntry
	nil,                             // 10: proto.MvdDemo.PlayersEntry
	nil,                             // 11: proto.MvdDemo.EntitiesEntry
	nil,                             // 12: proto.MvdFrame.PlayersEntry
	nil,                             // 13: proto.MvdFrame.EntitiesEntry
	(*PackedPlayer)(nil),            // 14: proto.PackedPlayer
	(*PackedSound)(nil),             // 15: proto.PackedSound
	(*Layout)(nil),                  // 16: proto.Layout
	(*ConfigString)(nil),            // 17: proto.ConfigString
	(*Print)(nil),                   // 18: proto.Print
	(*StuffText)(nil),               // 19: proto.StuffText
	(*PackedEntity)(nil),            // 20: proto.PackedEntity
}
var file_multiview_demo_proto_depIdxs = []int32{
	2,  // 0: proto.MvdDemo.remap:type_name -> proto.MvdConfigStringRemap
	4,  // 1: proto.MvdDemo.extension:type_name -> proto.MvdEntityStateExtension
	9,  // 2: proto.MvdDemo.configstrings:type_name -> proto.MvdDemo.ConfigstringsEntry
	10, // 3: proto.MvdDemo.players:type_name -> proto.MvdDemo.PlayersEntry
	11, // 4: proto.MvdDemo.entities:type_name -> proto.MvdDemo.EntitiesEntry
	8,  // 5: proto.MvdDemo.packets:type_name -> proto.MvdPacket
	14, // 6: proto.MvdPlayer.player_state:type_name -> proto.PackedPlayer
	12, // 7: proto.MvdFrame.players:type_name -> proto.MvdFrame.PlayersEntry
	13, // 8: proto.MvdFrame.entities:type_name -> proto.MvdFrame.EntitiesEntry
	15, // 9: proto.MvdFrame.sounds:type_name -> proto.PackedSound
	3,  // 10: proto.MvdUnicast.player:type_name -> proto.MvdPlayer
	16, // 11: proto.MvdUnicast.layouts:type_name -> proto.Layout
	17, // 12: proto.MvdUnicast.configstrings:type_name -> proto.ConfigString
	18, // 13: proto.MvdUnicast.prints:type_name -> proto.Print
	19, // 14: proto.MvdUnicast.stuffs:type_name -> proto.StuffText
	15, // 15: proto.MvdPacket.sounds:type_name -> proto.PackedSound
	18, // 16: proto.MvdPacket.prints:type_name -> proto.Print
	7,  // 17: proto.MvdPacket.unicasts:type_name -> proto.MvdUnicast
	6,  // 18: proto.MvdPacket.multicasts:type_name -> proto.MvdMulticast
	5,  // 19: proto.MvdPacket.frames:type_name -> proto.MvdFrame
	17, // 20: proto.MvdPacket.configstrings:type_name -> proto.ConfigString
	17, // 21: proto.MvdDemo.ConfigstringsEntry.value:type_name -> proto.ConfigString
	3,  // 22: proto.MvdDemo.PlayersEntry.value:type_name -> proto.MvdPlayer
	20, // 23: proto.MvdDemo.EntitiesEntry.value:type_name -> proto.PackedEntity
	14, // 24: proto.MvdFrame.PlayersEntry.value:type_name -> proto.PackedPlayer
	20, // 25: proto.MvdFrame.EntitiesEntry.value:type_name -> proto.PackedEntity
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_multiview_demo_proto_init() }
func file_multiview_demo_proto_init() {
	if File_multiview_demo_proto != nil {
		return
	}
	file_server_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_multiview_demo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvdDemo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiview_demo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Multicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiview_demo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvdConfigStringRemap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiview_demo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvdPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiview_demo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvdEntityStateExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiview_demo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvdFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiview_demo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvdMulticast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiview_demo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvdUnicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiview_demo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvdPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_multiview_demo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_multiview_demo_proto_goTypes,
		DependencyIndexes: file_multiview_demo_proto_depIdxs,
		MessageInfos:      file_multiview_demo_proto_msgTypes,
	}.Build()
	File_multiview_demo_proto = out.File
	file_multiview_demo_proto_rawDesc = nil
	file_multiview_demo_proto_goTypes = nil
	file_multiview_demo_proto_depIdxs = nil
}
